archetype fa2_basic(admin : address)

variable next_token_id : nat = 0

//TODO: set bigmap metadata which indicate name, version .. ect of contract
//TODO: set bigmap called token_metadata which store informations about prescription

asset ledger identified by ltoken lowner {
  ltoken     : nat;
  lowner     : address;
  token_balance    : bool;
}

asset operator identified by oaddr otoken oowner {
  oaddr       : address;
  otoken      : nat;
  oowner      : address;
}

record operator_param {
  opp_owner    : address;
  opp_operator : address;
  opp_token_id : nat
} as ((owner, (operator, token_id)))

asset doctor identified by daddr {
  daddr     : address;
}

asset pharmacy identified by paddr {
  paddr     : address;
}

entry update_operators (upl : list<or<operator_param, operator_param>>) {

}

record transfer_destination {
  to_dest           : address;
  token_id_dest     : nat;
  token_amount_dest : nat
} as ((to_, (token_id, amount)))

record transfer_item {
  from_: address;
  txs: list<transfer_destination>;
}

entry %transfer (itxs : list<transfer_item>) {

  called by doctor

  effect {
      for tx in itxs do
      for td in tx.txs do begin
        if caller <> tx.from_ then begin
          (* check operator *)
          do_require(operator.contains((caller,td.token_id_dest,tx.from_)),"FA2_NOT_OPERATOR");
        end;
        (* set token ownership *)
        ledger.update((td.token_id_dest, td.to_dest), {token_balance = false});
      end done;
    done
  }
}

entry mint (tow : address) {
  // require { fa2_r5: is_not_paused() }
  called by doctor

  effect {
    ledger.add_update((next_token_id, tow), {token_balance = true});
    next_token_id += 1; 
  }
}

entry burn () {
  called by pharmacy

}

entry addDoctor (doctorAddress : address) {
  called by admin

  effect {
    doctor.add({doctorAddress});
  }
}

entry delDoctor (doctorToDelete : address) {
  called by admin

  effect {
    doctor.remove(doctorToDelete);
  }
}

entry addPharma (pharmaAddress : address) {
  called by admin

  effect {
    pharmacy.add({pharmaAddress});
  }
}

entry delPharma (pharmaToDelete : address) {
  called by admin

  effect {
    pharmacy.remove(pharmaToDelete);
  }
}

entry setValue (id : nat, owner : address, value : bool) {
  called by pharmacy


  effect {
    ledger.update((id, owner), { token_balance = value });
  }
}

record balance_of_request {
  bo_owner : address;
  btoken_id : nat;
} as ((owner, token_id))

record balance_of_response {
  request : balance_of_request;
  balance_ : nat;
} as ((request, balance))

getter balance_of (requests : list<balance_of_request>) : list<balance_of_response> {
  return map(requests, br -> {
    request = br;
    balance_ = (ledger[(br.btoken_id, br.bo_owner)] ? 1 : 0)
  })
}
